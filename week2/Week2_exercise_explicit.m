clear allclose allclcLx = 0.5;     % [m] length of the plate in x-directionLy = 0.75;    % [m] length of the plate in y-directionh  = 5;       % [W/m/K] thermal conductance of the boundaryk  = 400;     % [W/m/K] thermal conductivity of copperH  = 0.01;    % [m] thickness of the platea  = 0.05;    % [m] with parameter of the heat loadQ0 = 100;     % [W/m2] applied heat load x0 = 0.3*Lx;  % [m] x-coordinate of the center of the heat loady0 = 0.3*Ly;  % [m] y-coordinate of the center of the heat loadQ  =@(x,y) Q0*exp(-((x-x0).^2+(y-y0).^2)/a^2);  % [W/m2] applied heat loadNx = 32;      % Number of grid points in the x- and y-directionNy = 42;x  = linspace(0,Lx,Nx);   % grids in the x- and y-directiony  = linspace(0,Ly,Ny);dx = x(2) - x(1);         % grid spacings in the x- and y-directiondy = y(2) - y(1);node_nmbrs = TODO    % TODO: create the matrix with node numbers for the explicit formulation                     % Note that you dont need to number the ghost points                      % for the explicit formulationnn = TODO;   % TODO: Define the number of nodes in the explicit formulationA = zeros(nn,nn);for ii = 2:Nx-1  for jj = 2:Ny-1                  % equations for nodes away from the boundary     node11 = node_nmbrs(ii  ,jj  );    node21 = node_nmbrs(ii+1,jj  );    node12 = node_nmbrs(ii  ,jj+1);    node01 = node_nmbrs(ii-1,jj  );    node10 = node_nmbrs(ii  ,jj-1);    A(node11, node11) = TODO;      % TODO: Implement the equations for nodes away from the boundary     A(node21, node11) = TODO;    % etc.   endend      % Equations for the boundaries (the corners will be considered later)for jj = 2:Ny-1                    % boundary conditions at x = 0  node11 = node_nmbrs(1,jj  );  node21 = node_nmbrs(2,jj  );  node12 = node_nmbrs(1,jj+1);  node10 = node_nmbrs(1,jj-1);  A(node11, node11) = TODO;        % TODO: Equations for the nodes at the boundary x = 0  % etc. endfor jj = 2:Ny-1                     % boundary conditions at x = Lx  node11 = node_nmbrs(end  ,jj  );  node21 = node_nmbrs(end-1,jj  );  node12 = node_nmbrs(end  ,jj+1);  node10 = node_nmbrs(end  ,jj-1);  A(node11, node11) = TODO;        % TODO: Equations for the nodes at the boundary x = Lx  % etc. endfor ii = 2:Nx-1                    % boundary conditions at y = 0  node11 = node_nmbrs(ii  ,1);  node21 = node_nmbrs(ii+1,1);  node12 = node_nmbrs(ii  ,2);  node01 = node_nmbrs(ii-1,1);  A(node11, node11) = TODO;        % TODO: Equations for the nodes at the boundary y = 0  % etc. endfor ii = 2:Nx-1                    % boundary conditions at y = Ly  node11 = node_nmbrs(ii  ,end);  node21 = node_nmbrs(ii+1,end);  node12 = node_nmbrs(ii  ,end-1);  node01 = node_nmbrs(ii-1,end);  A(node11, node11) = TODO;        % TODO: Equations for the nodes at the boundary y = Ly  % etc. end      % Equations for the four cornersnode11 = node_nmbrs(1,1);       % corner (x,y) = (0,0)node21 = node_nmbrs(2,1);   node12 = node_nmbrs(1,2);A(node11, node11) = TODO;        % TODO: Equation for the node at the corner (x,y) = (0,0)% etc. node11 = node_nmbrs(end  ,1);       % corner (x,y) = (Lx,0)node21 = node_nmbrs(end-1,1);   node12 = node_nmbrs(end  ,2);A(node11, node11) = TODO;        % TODO: Equation for the node at the corner (x,y) = (Lx,0)% etc. node11 = node_nmbrs(1,end  );       % corner (x,y) = (0,Ly)node21 = node_nmbrs(2,end  );   node12 = node_nmbrs(1,end-1);A(node11, node11) = = TODO;        % TODO: Equation for the node at the corner (x,y) = (0,Ly)% etc. node11 = node_nmbrs(end  ,end  );       % corner (x,y) = (Lx,Ly)node21 = node_nmbrs(end-1,end  );   node12 = node_nmbrs(end  ,end-1);A(node11, node11) = = TODO;        % TODO: Equation for the node at the corner (x,y) = (Lx,Ly)% etc. f = zeros(nn,1);                % forcing vectorfor ii = 1:Nx  for jj = 1:Ny    node11 = node_nmbrs(ii, jj);    f(node11) = TODO;  endendT = TODO;                        % TODO: solve for the constructed system of equationsfig1 = figure(1);surf(x,y,f(node_nmbrs).')daspect([1, 1, max(f)])axis tightxlabel 'x [m]'ylabel 'y [m]'title 'Applied heat load [W/m^2]'colorbarsaveas(fig1, 'Exercise1_heatload.jpg')fig2 = figure(2)surf(x,y,u(node_nmbrs).')daspect([1, 1, 0.2])axis tightxlabel 'x [m]'ylabel 'y [m]'title 'Temperature field [K]'colorbarsaveas(fig2, 'Exercise1_temperature.jpg')