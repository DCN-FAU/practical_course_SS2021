clear allclose allclcLx = 0.5;     % [m] length of the plate in x-directionLy = 0.75;    % [m] length of the plate in y-directionh  = 5;       % [W/m/K] thermal conductance of the boundaryk  = 400;     % [W/m/K] thermal conductivity of copperH  = 0.01;    % [m] thickness of the platea  = 0.05;    % [m] with parameter of the heat loadQ0 = 100;     % [W/m2] applied heat load x0 = 0.3*Lx;  % [m] x-coordinate of the center of the heat loady0 = 0.3*Ly;  % [m] y-coordinate of the center of the heat loadQ  =@(x,y) Q0*exp(-((x-x0).^2+(y-y0).^2)/a^2);  % [W/m2] applied heat loadNx = 32;      % Number of grid points in the x- and y-directionNy = 42;x  = linspace(0,Lx,Nx);   % grids in the x- and y-directiony  = linspace(0,Ly,Ny);dx = x(2) - x(1);         % grid spacings in the x- and y-directiondy = y(2) - y(1);node_nmbrs = TODO;   % Step I: create the matrix with the node numbers (see slides)                     % You can for example follow the five steps outlined below,                      % but there other solutions                     % Step I.A internal nodes                     % Step I.B ghost points for the boundary at x = 0                     % Step I.C ghost points for the boundary at x = Lx                     % Step I.D ghost points for the boundary at y = 0                     % Step I.E ghost points for the boundary at y = Lynn = TODO;   % TODO: define the total number of nodes in the implicit formulationA = zeros(nn,nn);                % Build the stiffness matrixfor ii = 1:Nx  for jj = 1:Ny                  % equations for internal nodes    node11 = node_nmbrs(ii+1,jj+1);    node21 = node_nmbrs(ii+2,jj+1);    node12 = node_nmbrs(ii+1,jj+2);    node01 = node_nmbrs(ii  ,jj+1);    node10 = node_nmbrs(ii+1,jj  );    A(node11, node11) = TODO     % TODO: implement equations for the internal nodes  endendfor jj = 1:Ny                     % boundary conditions at x = 0  node11 = node_nmbrs(1,jj+1);  node21 = node_nmbrs(2,jj+1);  node31 = node_nmbrs(3,jj+1);  A(node11,node11) = TODO        % TODO: Implement boundary conditionsendfor jj = 1:Ny                     % boundary conditions at x = Lx  node11 = node_nmbrs(end  ,jj+1);  node21 = node_nmbrs(end-1,jj+1);  node31 = node_nmbrs(end-2,jj+1);   A(node11,node11) = TODO        % TODO: Implement boundary conditionsendfor ii = 1:Nx                    % boundary conditions at y = 0  node11 = node_nmbrs(ii+1,1);  node12 = node_nmbrs(ii+1,2);  node13 = node_nmbrs(ii+1,3);  A(node11,node11) = TODO        % TODO: Implement boundary conditionsendfor ii = 1:Nx                    % boundary conditions at y = Ly  node11 = node_nmbrs(ii+1,end);  node12 = node_nmbrs(ii+1,end-1);  node13 = node_nmbrs(ii+1,end-2);  A(node11,node11) = TODO        % TODO: Implement boundary conditionsendf = zeros(nn,1);                % forcing vectorfor ii = 1:Nx  for jj = 1:Ny    node11 = node_nmbrs(ii+1, jj+1);    f(node11) = TODO             % Define the forcing vector  endendT = TODO;                        % TODO: solve the constructed system of equationsnodes_int = node_nmbrs(2:end-1, 2:end-1);  % only the values at the internal nodes will be plottedfig1 = figure(1);surf(x,y,f(nodes_int).')daspect([1, 1, max(f)])axis tightxlabel 'x [m]'ylabel 'y [m]'title 'Applied heat load [W/m^2]'colorbarsaveas(fig1, 'Exercise1_heatload.jpg')fig2 = figure(2)surf(x,y,T(nodes_int).')daspect([1, 1, 0.2])axis tightxlabel 'x [m]'ylabel 'y [m]'title 'Temperature field [K]'colorbarsaveas(fig2, 'Exercise1_temperature.jpg')